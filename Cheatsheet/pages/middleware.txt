# phil welsby - 23 sept 2021

**************
* MIDDLEWARE *
**************

Middleware is software that operates between the client requesr sand the server response

First create a user function in controllers that looks like this:

 exports.addUser = async (req, res) => {
    try {
      const user = new User(req.body);
      await user.save();
      res.status(200).send(user)
    } catch (error) {
      res.status(500).send(error);
    }
  }




Then you will need to create a model that looks something like this:

const userSchema = mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
    },
    password: {
        type: String,
        required: true
    }
})

const User = mongoose.model("User", userSchema);

module.exports = {User};




Then create 2 functions, one to send the data and one to hash the password :

const bcrypt = require("bcryptjs")

//test function
exports.testMiddle = (req, res, next) => {
    try {
        console.log(req.body)
        req.user = "Phil"
        next();
    } catch (error) {
        res.status(500).send(error);
    }
}

exports.hashPassword = async (req, res, next) => {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 8);
        req.body.password = hashedPassword
        next()
    } catch (error) {
        res.status(500).send(error);
        
    }
}


NOTE YOU WILL NEED TO INSTALL A DEPENDENCY bcryptjs WITH:
npm i bcryptjs

YOU WILL THEN NEED TO require THE FUNCTIONS AND CALL THEM WITH THESE 2 LINES IN YOUR routes file:

const {testMiddle, hashPassword} = require("../middleware")
helloRouter.post("/user", hashPassword, addUser);


REMEMBER IF YOU CALL 2 require 2 FUNCTIONS IN THE SAME LINE OF CODE TO DECOSTRUCT THEM
BY WRAPPING IN CURLY BRACES LIKE THIS:
const {Guitar, User} = require("../guitar/guitar.models");

YOU SHOULD NOW BE ABLE TO MAKE A POST REQUEST IN THUNDER CLIENT OR INSOMNIA WITH THIS IN THE BODY:

{
    "name": "Phil",
    "email": "phil@email.com",
    "password": "test123"
}

AND RECEIVE A REPLY SIMILAR TO THIS: {
  "name": "Phil",
  "email": "phil@email.com",
  "password": "$2a$08$viFKd/xBv99bpNXVbGTEB.NnSQSoMpBE4vN37LU9BZJBRF5geFNkW",
  "_id": "614cee4f2d5322a5513fc9b9",
  "__v": 0
}

SO THAT HAS CREATED AND POSTED A USER WITH THE PASSWORD ENCRYPTED
NOW WE NEED TO RETRIEVE IT AND UN-ENCRYPT THE PASSWORD

FIRST WE CAN CREATE A FUNCTION TO DE-CRYPT THE PASSWORD LIKE THIS:

exports.decryptPassword = async (req, res, next) => {
    try {
        const user = await User.findOne({email: req.body.email});
        const passwordsMatch = await bcrypt.compare(
          req.body.password, 
          user.password
        );
        if (passwordsMatch) {
          req.user = user; //NOTE: THIS req.user IS USED IN THE findUser FUNCTION
          next()
        } else {
          throw new Error
        }
    }   catch { (error) {
        res.status(500).send(error);
    }
}

THE FUNCTION NEEDS TO HAVE THE USER DATA IN ORDER TO DOT HE COMPARE
req.body.password IS THE RAW DATA, SO WE NEED TO require THE User MODEL
FROM THE models.js FILE WITH A LINE THAT LOOKS LIKE THIS:
const { User } = require ("../models");
NOTE User IS IN CURLY BRACES IF IT IS BEING DECONSTRUCTED
find ONLY NEEDS A FILTER AND IT WILL RETURN THE ENTIRE USER DATABASE ENTRY
USING email GIVES IT AN EXTRA LAYER OF SECURITY BACAUSE name IS NOT UNIQUE
compare TAKES THE STRING AND THEN THE HASHED STRING
WE NEXT NEED TO CHECK IF passwordsMatch IS true OR NOT USING AN else/if
IF passwordsMatch IS NOT true THEN WE throw new Error
AS SOON AS THIS ERROR IS THROWN WE MOVE INTO OUR catch BLOCK TO DEAL WITH IT
THIS COULD HAPPEN IF A USER WERE TO PUT IN THE WRONG PASSWORD FOR EXAMPLE
SO next ISN'T GETTING CALLED AND WE DON'T INADVERTANTLY END UP IN OUR controller 
ALL THIS IS BEING DONE IN middleware BUT COULD BE ACOMPLISHED WITH ONE LINE IN THE controller

FIRST IMPORT decryptPassword INTO THE route FILE USING require
NEXT WE GO TO OUR ROOTS FILE AND ADD A NEW ROUTE. THIS MUST BE UNIQUE SO IN OUR EXAMPLE WE GIVE A
NEW ROUTE BECAUSE WE HAVE ALREADY USED user AS A ROUTE WE ADD A LINE LIKE THIS
helloRouter.post("/user/login", decryptPassword, findUser);

NOTE AT THIS POINT findUser DOES NOT EXIST AND WE HAVE TO CREATE IT IN OUR controllers FILE

exports.findUser = async (req, res) => {
  try {
    res.status(200).send(req.user) //NOTE: req.user CAME FROM decryptPassword IN middleware FILE
  } catch (error) {
    res.status(500).send(error);
  }
}

NOTE: findUser FUNCTION WILL NOW NEED TO BE IMPORTED INTO THE routes FILE
YOU SHOULD NOW BE ABLE TO DO A POST REQUEST WITH THE user/login ENDPOINT
AND THIS IN THE BODY:

{
  "email": "phil@email.com",
  "password": "test123"
}

