# phil welsby - 20 sept 2021

first set up a git repo and clone

next create the file stucture from inside the parent folder it will look like this:

.
└── src
    ├── controllers
    │   └── index.js
    ├── routes
    │   └── index.js
    └── server.js

then run npm init -y

again inside the parent folder run this command to intall express:
npm install express

and to install nodemon so you don't have to keep restarting the server run:
npm install --save-dev nodemon

add this to the package.json file uder test, remember to put a comma at the end of test:
"dev": "nodemon src/server.js"

*****************************************************
* next create the server.js it could look like this: *
*****************************************************

const express = require("express");
const app = express();
const helloRouter = require("./routes")
app.use(express.json());

app.use(helloRouter)

const port = process.env.PORT || 5000;
app.listen(port, () => {
    console.log(`Listening on port ${port}...`);
});


**********************************************
* index.js in routes folder could look like this: *
**********************************************

//routes
const {Router} = require("express");
const helloRouter = Router();
const {testObj} = require("../controllers")

helloRouter.get("/testObj", testObj);

module.exports = helloRouter;

********************************************
* index.js in controllers could look like this: * 
********************************************

//controllers
const obj = [
    {
        id: 0,
        name: 'phil',
        age: 61,

    }
];

exports.testObj = (req, res) => {
    res.send(obj);
}



NOW ENTER http://[ip address of server]:5000/testObj and it should return the following:

    {
        id: 0,
        name: 'phil',
        age: 61,

    }

*****************************************************************
* GETTING server TO COMMUNICATE WITH mongo Atlas USING mongoose *
*****************************************************************

First set up a mongoose connection:

************************
* Code looks like this *
************************

const mongoose = require("mongoose");
require("dotenv").config();

const connection = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("We Have Success");
  } catch (error) {
    console.log(error);
  }
};

connection();


YOU WILL NEED TO INSTALL cors BY RUNNING THE FOLLOWING INSIDE THE PARENT FOLDER:
npm i cors

THEN EDIT THE server.js FILE ADDING THE cors LINES TO LOOK LIKE THIS:

require("./db/connection");
const express = require("express");
const cors = require("cors");
const app = express();
const helloRouter = require("./routes");

app.use(express.json());
app.use(cors());

app.use(helloRouter)

const port = process.env.PORT || 5000;
app.listen(port, () => {
    console.log(`Listening on port ${port}...`);
});


REMEMBER TO ADD THE MONGO_URI INTO THE .env FILE AND ADD .env TO THE .gitignore FILE
IT SHOULD NOW BE POSSIBLE TO UPDATE THE Atlas DATABASE ON MONGODB SERVER SIDE USING Insomnia
AND TEST THE HTTP VERBS: GET POST PUT PATCH DELETE

NEXT INSTALL Mongoose LIKE THIS
npm i mongoose

THEN CREATE A .env FILE INSIDE THE PARENT FOLDER AND ADD IT TO .gitignore
NOW ADD THE MONGO_URI TO THE .env FILE

NEXT CREATE A db FOLDER INSIDE THE src FOLDER AND CREATE A FILE CALLED connection.js INSIDE THE db FOLDER
THIS FILE IS USED TO MAKE CONNECTION TO Atlas AND THE MongoDB DATABASE, IT WILL LOOK LIKE THIS:

const mongoose = require("mongoose");
require("dotenv").config();

const connection = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("We Have Success");
  } catch (error) {
    console.log(error);
  }
};

connection();

YOU CAN NOW TEST THE CONNECTION BY RUNNING IT WITH THIS COMMAND:
node src/db/connection.js

MAKE SURE THAT THE FIRST LINE OF THE server.js FILE CONTAINS THE LINE
require("./db/connection")

NEXT INSIDE THE src FOLDER CREATE A FOLDER CALLED models AND ADD A FILE CALLED index.js

*****************************************
* THE MODEL STRUCTURE LOOKS LIKE THIS:  *
*****************************************

const mongoose = require("mongoose");

const filmSchema = mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true,
  },
  actor: {
    type: String,
  },
  watched: {
    type: Boolean,
    required: true,
    default: false,
  },
});

const Film = mongoose.model("Film", filmSchema);

module.exports = Film;

YOU NOW NEED TO ADD THIS TO THE controller.js FILE WITH THE LINE:
const Film = require("../models");
FILM WAS THE EXAMPLE HERE YOUR'S MAY BE DIFFERENT

**************************************************************
* index.js INSIDE THE CONTROLLERS FOLDER WILL LOOK LIKE THIS *
**************************************************************

const Film = require("../models")

exports.findFilms = async (req, res) => {
  try {
    const list = await Film.find({});
    res.status(200).send({ allFilms: list });
  } catch (error) {
    res.status(500).send({ err: error });
  }
};

exports.addFilm = async (req, res) => {
  try {
    const film = new Film(req.body);
    await film.save();
    res.status(200).send({ film: film, message: "Successfully added film" });
  } catch (error) {
    res.status(500).send({ err: error });
  }
};

ONLY GET AND POST EXAMPLES ARE SHOWN HERE


*****************************************************************************
*****************************************************************************

**************************************************************
* ORDER OF OPERATIONS WHEN BUILDING A REST API USING MONGODB *
**************************************************************

1) Create GitHub repo and clone
2) Create file structure
3) install dependencies, create connection.js and teat connection
4) Install express/nodemon, edit package.json to run nodemon
5) Setut server.js/router/controller and test GET
6) test nodemon working ok
7) install cors edit server.js
8) create model.js
9) Test GET POST PUT PATCH DELETE from Thunder Client for a response
10) Create a PUSH to MongoDB and test working
11) Add GET function and test
