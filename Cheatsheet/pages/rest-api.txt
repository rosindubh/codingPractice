# phil welsby - 20 sept 2021

first set up a git repo and clone

next create the file stucture from inside the parent folder it will look like this:

.
└── src
    ├── controllers
    │   └── index.js
    ├── routes
    │   └── index.js
    └── server.js

then run npm init -y

again inside the parent folder run this command to intall express:
npm install express

and to install nodemon so you don't have to keep restarting the server run:
npm install --save-dev nodemon

add this to the package.json file uder test, remember to put a comma at the end of test:
"dev": "nodemon src/server.js"

*****************************************************
* next create the server.js it could look like this: *
*****************************************************

const express = require("express");
const app = express();
const helloRouter = require("./routes")
app.use(express.json());

app.use(helloRouter)

const port = process.env.PORT || 5000;
app.listen(port, () => {
    console.log(`Listening on port ${port}...`);
});


**********************************************
* index.js in routes folder could look like this: *
**********************************************

//routes
const {Router} = require("express");
const helloRouter = Router();
const {testObj} = require("../controllers")

helloRouter.get("/testObj", testObj);

module.exports = helloRouter;

********************************************
* index.js in controllers could look like this: * 
********************************************

//controllers
const obj = [
    {
        id: 0,
        name: 'phil',
        age: 61,

    }
];

exports.testObj = (req, res) => {
    res.send(obj);
}



NOW ENTER http://[ip address of server]:5000/testObj and it should return the following:

    {
        id: 0,
        name: 'phil',
        age: 61,

    }

*****************************************************************
* GETTING server TO COMMUNICATE WITH mongo Atlas USING mongoose *
*****************************************************************

First set up a mongoose connection:

************************
* Code looks like this *
************************

const mongoose = require("mongoose");
require("dotenv").config();

const connection = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("We Have Success");
  } catch (error) {
    console.log(error);
  }
};

connection();


YOU WILL NEED TO INSTALL cors BY RUNNING THE FOLLOWING INSIDE THE PARENT FOLDER:
npm i cors

THEN EDIT THE server.js FILE ADDING THE cors LINES TO LOOK LIKE THIS:

require("./db/connection");
const express = require("express");
const cors = require("cors");
const app = express();
const helloRouter = require("./routes")
app.use(express.json());
app.use(cors());

app.use(helloRouter)

const port = process.env.PORT || 5000;
app.listen(port, () => {
    console.log(`Listening on port ${port}...`);
});


REMEMBER TO ADD THE MONGO_URI INTO THE .env FILE AND ADD .env TO THE .gitignore FILE
IT SHOULD NOW BE POSSIBLE TO UPDATE THE Atlas DATABASE ON MONGODB SERVER SIDE USING Insomnia
AND TEST THE HTTP VERBS: GET POST PUT PATCH DELETE

