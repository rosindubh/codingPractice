phil welsby - 13 sept 2021

*************************************
* Creating a MySQL Database and User*
*************************************

sudo mysql -u root -p
CREATE DATABASE exampledb;
CREATE USER 'exampleuser'@'localhost' IDENTIFIED BY 'pimylifeup';
GRANT ALL PRIVILEGES ON exampledb.* TO 'exampleuser'@'localhost';
FLUSH PRIVILEGES;

__________________________________________________________________________________________________

----------------------------
-COMMANDS FROM ANDY'S VIDEO-
----------------------------

CREATE DATABASE demoFilm;
USE demoFilm;
CREATE TABLE film (id INT AUTO_INCREMENT NOT NULL,
					filmName VARCHAR(50) NOT NULL,
					actor VARCHAR(50) DEFAULT "No Actor Specified",
                    likey VARCHAR(4) DEFAULT "good",
                    PRIMARY KEY(id));
INSERT INTO film (filmName) VALUES ("Spiderman");
SELECT * FROM film;
ALTER TABLE film ADD COLUMN director VARCHAR(50) DEFAULT "No Director Specified" AFTER actor;
UPDATE film SET likey = "bad" WHERE filmName = "Spiderman";
select * FROM film;


__________________________________________________________________________________________________

--------------------------------------------
- Some of The Most Important SQL Commands: - 
--------------------------------------------

    SELECT - extracts data from a database
    UPDATE - updates data in a database
    DELETE - deletes data from a database
    INSERT INTO - inserts new data into a database
    CREATE DATABASE - creates a new database
    ALTER DATABASE - modifies a database
    CREATE TABLE - creates a new table
    ALTER TABLE - modifies a table
    DROP TABLE - deletes a table
    CREATE INDEX - creates an index (search key)
    DROP INDEX - deletes an index

    
    To create a DATABASE: CREATE DATABASE database_name;
    To delete a DATABASE: DROP DATABASE database_name;
    To create a TABLE:    First use: USE database_name;
                          Then the following is an example:
                          CREATE TABLE band (id INT AUTO_INCREMENT NOT NULL,filmName VARCHAR(50) NOT NULL,formed VARCHAR(50) DEFAULT "No Year Specified",likey VARCHAR(4) DEFAULT "good",PRIMARY KEY(id)); 
    To delete a TABLE:    DROP TABLE table_name;
    To delete a ROW:       DELETE FROM band WHERE ID=21;
                          This would delete ID 21

*******************
*MySQL Constraints*
*******************

SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

The following constraints are commonly used in SQL:

    NOT NULL - Ensures that a column cannot have a NULL value
    UNIQUE - Ensures that all values in a column are different
    PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    FOREIGN KEY - Prevents actions that would destroy links between tables
    CHECK - Ensures that the values in a column satisfies a specific condition
    DEFAULT - Sets a default value for a column if no value is specified
    CREATE INDEX - Used to create and retrieve data from the database very quickly

*************************
*MySQL UNIQUE Constraint*
*************************

The UNIQUE constraint ensures that all values in a column are different.

Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.

A PRIMARY KEY constraint automatically has a UNIQUE constraint.

However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

EXAMPLE:
The following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:

CREATE TABLE Persons (ID int NOT NULL,LastName varchar(255) NOT NULL,FirstName varchar(255),Age int,UNIQUE (ID)); 

******************************
*MySQL PRIMARY KEY Constraint*
******************************

The PRIMARY KEY constraint uniquely identifies each record in a table.

Primary keys must contain UNIQUE values, and cannot contain NULL values.

A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).

******************************
*MySQL FOREIGN KEY Constraint*
******************************

The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.

A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.

The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.

