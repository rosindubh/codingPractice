//phil welsby - 11 sept 2021

LINK: https://mongoosejs.com/
LINK TO MY FIRST MONGOOSE ON GitHub: https://github.com/rosindubh/film-app-mongoose
Getting Started

First be sure you have MongoDB and Node.js installed.

Next install Mongoose from the command line using npm:

$ npm install mongoose --save


____________________________
CREATING A MONGOOSE DATABASE
----------------------------

Basic setup
-----------
Create a GitHub repository using the name of your project and clone it.

Before you do anything run [npm init -y]

Then make a .gitignore to include /node_modules and .env
Then make a .env file which contains the MONGO_URI = <connection URI goes here>
Remember to edit the URI to contain the correct username and password. Add a different cluster name if different.

Next make a src folder
Inside the src folder create a file called app.js
Then inside the src folder create a db folder and a films folder.
Next inside db folder create a file called connection.js
Next inside the films folder create 2 files. One called film.methods.js and one called film.model.js
NOTE THE NAMES film.methods and film.model CAN BE WHATEVER SUITS YOUR PARTICULAR PROJECT.
Finally run [npm i mongoose dotenv]  to install the required libraries.

Writing the code
----------------
Start with the connection.js file

const mongoose = require('mongoose');
require('dotenv').config();

const connection = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI)
        console.log('Successfully connected...');
    } catch (error) {
        console.log(error);
    }
}

connection();

YOU CAN NOW RUN THE connection.js FILE IN THE TERMINAL AND IT SHOULD CONNECT AND HANG THERE CONNECTED


Next we go to app.js file and the first thing we do is require connection.js because we want it to run
when we start app.js. We do this with this line of code: 
require('./db/connection');

This means db/connection is going to run on line 1 of app.js ands the connection is going to stay open until told to close.

Now we require access to mongoose if we want to disconnect with this line of code: 
const mongoose = require('mongoose');

Next we have already planned the functions we are going to build. So we start by adding the first one to app.js even though
we haven't made it yet. This is done with the following line of code:
const {addMovie} = require('./films/film.methods');
NOTE: addMovive is the function in this case, it will be different in your project.
NOTE: ./films/film.methods is the path to the file called film.methods.js
The next time app.js is run addMove must have something in it, even if it's only a consoile.log

The last thing we need to add is the command variable to catch argv[2] in the terminal, 
and assign it to variable named command.
This is done with the following line of code:
const command = process.argv[2];

You can also use yargs in place of process.argv
LINK: https://yargs.js.org/


*********************************
*connection.js                  * 
*CODE SHOULD NOW LOOK LIKE THIS:*
*********************************

require('./db/connection');
const mongoose = require('mongoose');
const {addMovie} = require('./films/film.methods');
const command = process.argv[2];

WE now start to build our app function:

const app = async = () => {
  if (command === 'add' {
    await addMovie({
      name: process.argv[3],
      actor: process.argv[4],
      like: process.argv[5],
  })
 }
 mongoose.disconnect;
};

________________________________________________________
*HERE WE HAVE PASSED AN OBJECT DIRECTLY INTO THE FUNCTION *
---------------------------------------------------------

*********************************
*app.js                         *
*CODE SHOULD NOW LOOK LIKE THIS:*
*********************************

require('./db/connection');
const mongoose = require('mongoose');
const {addMovie} = require('./films/film.methods');
const command = process.argv[2];

const app = async () => {
  if (command === 'add') {
    await addMovie({
      name: process.argv[3],
      actor: process.argv[4],
      like: process.argv[5],
  })
 }
 mongoose.disconnect();
};

app();


NEXT WE NEED TO WRITE THE MODEL AND THE METHOD

Now we go to the model.js file
Here we are going to build a schema and convert it to a model.
A schema is structure that your database needs

First thing we do is import mongoose like we did in the last 2 files
const mongoose = require('mongoose');

Then we build the schema, NOTE: mongoose.schema() take an object as a parameter

const filmSchema = mongoose.Schema({
    name: {
      type: String,
      require: true,
      unique: true,
   },
})

HERE WE HAVE DETERMINED THAT name WILL BE OF TYPE STRING, IT WILL REQUIRE A NAME AND ONLY ONE INSTANCE 
OF THAT NAME CAN BE ADDED TO THE DATABASE

WE THEN DEFINE THE OTHER key, value pairs that we want in our database

************************
*film.model.js         * 
*SHOULD LOOK LIKE THIS:*
************************

const mongoose = require('mongoose');

const filmSchema = mongoose.Schema({
    name: {
      type: String,
      required: true,
      unique: true,
   },
   actor: { 
      type: String ,
   },
   like: { 
      type: String,
      required: true
   },
});

const Film = mongoose.model("Film", filmSchema);

module.exports = Film;



Finally we go to the film.methods.js file and build the methods that will be required

First line of code is to require the model with this line of code:
const Film = require('./film.model');

NOTE: the file film.model.js resides in the same folder as film.methods.js

We then export our addMove function we decalred in app.js earlier as follows:

exports.addMovie = async (newFilm) => {
    try {
        const movie = new Film(newFilm);
        await movie.save()
    } catch (error) {
      console.log(error);
  }
};


****************************
*film.methods.js           *
*CODE SHOULD LOOK LIKE THIS*
****************************

const Film = require('./film.model');

exports.addMovie = async (newFilm) => { 
    try {
        const movie = new Film(newFilm);
        await movie.save()
    } catch (error) {
      console.log(error);
  }
};

YOU SHOULD NOW BE ABLE TO TEST IF THIS ADDS DATA TO YOUR DATABASE
VIDEO PAUSED AT 1:04:00 DATE OF VIDEO Thursday, September 9, 2021

