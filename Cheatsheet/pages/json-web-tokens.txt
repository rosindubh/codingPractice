#phil welsby - 24 sept 2021

***************************************************************
* FIRST CREATE A mongoose connection, STANDARD DONE IT BEFORE *
***************************************************************

const mongoose = require("mongoose");
require("dotenv").config();

const connection = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("successfully connected");
  } catch (error) {
    console.log(error);
  }
};

connection();

************************
* NEXT MAKE YOUR model *
************************

const mongoose = require("mongoose");

const userSchema = mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  pass: {
    type: String,
    required: true,
  },
});

const User = mongoose.model("User", userSchema);

module.exports = User;

*********************************************
* THE controllers FILE COULD LOOK LIKE THIS *
*********************************************

const User = require("./user.model");
const bcrypt = require("bcryptjs");

exports.addUser = async (req, res) => {
  try {
    const newUser = new User(req.body);
    await newUser.save();
    res.status(200).send({ newUser, token: req.token, message: "Success" });
  } catch (error) {
    res.status(500).send(error);
  }
};

exports.login = async (req, res) => {
  try {
    const user = await User.findOne({ email: req.body.email });
    if (await bcrypt.compare(req.body.pass, user.pass)) {
      res.status(200).send({ user, token: req.token, message: "Success" });
    } else {
      throw new Error();
    }
  } catch (error) {
    res.status(500).send(error);
  }
};

exports.updateUser = async (req, res) => {
  try {
    await User.updateOne(
      { email: req.body.email },
      { $set: { [req.body.key]: req.body.update } }
    );
    res.status(200).send({ message: "Success" });
  } catch (error) {
    res.status(500).send(error);
  }
};

exports.deleteUser = async (req, res) => {
  try {
    await User.deleteOne({ email: req.params.email });
    res.status(200).send({ message: "Success" });
  } catch (error) {
    res.status(500).send(error);
  }
};

exports.tokenLogin = (req, res) => {
  try {
    res.status(200).send(req.user);
  } catch (error) {
    res.status(500).send(error);
  }
};


************************************************
* THIS IS WHAT THE routes FILE COULD LOOK LIKE *
************************************************

const { Router } = require("express");
const {
  addUser,
  login,
  updateUser,
  deleteUser,
  tokenLogin,
} = require("./user.controllers");
const { hashPassword, createToken, decodeToken } = require("../middleware");
const userRouter = Router();

userRouter.get("/user", decodeToken, tokenLogin);
userRouter.post("/user", hashPassword, createToken, addUser);
userRouter.put("/user", hashPassword, updateUser);
userRouter.delete("/user/:email", deleteUser);
userRouter.post("/user/login", createToken, login);

module.exports = userRouter;


******************************************
* HERE IS AN EXAMPLE OF A server.js FILE *
******************************************

require("./db/connection.js");
const express = require("express");
const cors = require("cors");
const userRouter = require("./user/user.routes");
const app = express();
const port = process.env.PORT || 5000;

app.use(express.json());
app.use(cors());
app.use(userRouter);

app.listen(port, () => {
  console.log(`Listening on port ${port}`);
});


*******************************
* HERE IS THE middleware FILE *
*******************************

const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../user/user.model");

exports.hashPassword = async (req, res, next) => {
  try {
    if (req.body.pass) {
      req.body.pass = await bcrypt.hash(req.body.pass, 8);
    }
    next();
  } catch (error) {
    res.status(500).send(error);
  }
};

exports.createToken = (req, res, next) => {
  try {
    const token = jwt.sign({ email: req.body.email }, process.env.SECRET);
    req.token = token;
    next();
  } catch (error) {
    res.status(500).send(error);
  }
};

exports.decodeToken = async (req, res, next) => {
  try {
    const token = req.header("Authorization").replace("Bearer ", "");
    const decodedToken = jwt.verify(token, process.env.SECRET);
    const user = await User.findOne({ email: decodedToken.email });
    req.user = user;
    next();
  } catch (error) {
    res.status(500).send(error);
  }
};
