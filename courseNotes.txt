# phil welsby - CodeNation Master27 Course Notes

Setting up a ssh key on GitHub
------------------------------
1) go to this link: https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account
   and follow instruction for Generating a new key
2) now go to this link and follow instructions:
   https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account


Thursday, July 29, 2021

Functions
---------
Three ways of writing a function:

(1)
DECLARATION:
function myFunction () {
  //block of cod goes here//
}
myFunction();

(2)
EXPRESSION/ANONYMOUS FUNCTION:
const myFunction = function() {
  //block of code goes here//
}
myFunction();

(3)
ARROW FUNCTION SYNTAX:
const myFunction = () => {
  //block of code here//
}
myFunction();



Monday 23 August 2021
Morning session
---------------------

Testing using jest:
To set up the environment:
1) create a folder with no spaces.
2) create 2 files called [app.js] and [app.test.js]
3) run: <npm init -y>
4) run: <npm install --save-dev jest>
5) edit line 7 of the package.json file to read ["test": "jest"]

First we create the [app.test.js] file adding [let app = require("./app");]
so we can acquire the app.js files contents.

a test may look something like this:
test('should equal 5 when passed 2 and 3', () => {
  expect(app.add(2, 3)).toBe(5)
});


To run the test we enter: [npm test]
The test will at this stage fail. Next create a function or whatever that we are 
testing for in the app.js file, and export the contents as follows:
module.exports = {
  <enter the name of the apps here with a comma after each like this>
  add,
  myFunction,
  philsFunctions,
  noOfFunctions: 3
}

If these 3 functions existed in the [app.js] file they would be accessible to the [app.test.js] file.

We only covered Test Driven Development (TDD) today. Other type of testing are:
Integration Testing
Functional Testing


Tuesday 24 August 2021
Morning
React.js

NOTE: props and components are very important

Three major players:    React.js    Vue     Angular

JSX-HTML converts to standard JavaScript

A component can be either a function or a class.

Functional Components
App is the root component

There is a virtual DOM and an actual DOM. React updates the actual DOM if the virtual DOM changes.

Standard practice is to name function components starting with a capital letter.

There can only be one parent element, most commonly a <div> tag

React.createElement(      this is JavaScript
Component<                this is JSX

The name of the compiler is Babel

To start a new project enter the following into the terminal. Making sure you are in the right directory.

npx create-react-app [name of the app goes here]

Afternoon session
-----------------

You cannot use the word class in React, class is a keyword inside React. Use className instead.

State & Methods
----------------

useState hook (research this)

NOTE: hooks do not work inside classes

You can only pass props down the tree not up it.

Check out Netninja for React and read the React Documentation

Example of using useState:
const [count, setCount] = useState(0)

The useState function returns a pair of values which we restructure with []
The first is a value, the second is a function to update the first

Think of the state as a kind of storee, which holds the current state
of the application.

When the app loads, it will be rendered with the initial state (that you coded in)
but as uses interact with your app, there state can change

As well as having a state property inside our component, we can also have different
methods (functions) which can do different things to our user interface



Tuesday 31 August

my GitHub link to this subject is here: https://github.com/rosindubh/fetch-app

API's and fetching DATA

Installed Insomnia link https://insomnia.rest/

An API is a software interface between computers and programs or programs with other programs.
The <fetch> module is used to get data

React life-cycle link: https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

componentDidMount Method
------------------------
This is no loger as popular due to the arrival of hooks and the use of functionale components
This method called handelFetch


componentDidUpdate Method
------------------------
This was used as confirmation that the component mounted and feed to console 

componentWillUnmount Method
---------------------------
This is like a clean-up say ifyou were to click off the page

Throw and Try to Catch
----------------------
This is error handling. 
The try statement lets you test a block of code for errors.
The catch statement lets you handle the error.
The throw statement lets you create custom errors.
The finally statement lets you execute code, after try and catch, regardless of the result.

JavaScript try and catch

The try statement allows you to define a block of code to be tested for errors while it is being executed.

The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

The JavaScript statements try and catch come in pairs:

try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
} 


The throw Statement

The throw statement allows you to create a custom error.

Technically you can throw an exception (throw an error).

The exception can be a JavaScript String, a Number, a Boolean or an Object:


The finally Statement
---------------------
The finally statement lets you execute code, after try and catch, regardless of the result:


React Router link to docs: https://reactrouter.com/web/guides/quick-start
------------
For development use: npm install react-router-dom
Install in the project folder

1st Example: Basic Routing
In this example we have 3 “pages” handled by the router: a home page, an about page, and a users page. 
As you click around on the different <Link>s, the router renders the matching <Route>.Note: Behind the 
scenes a <Link> renders an <a> with a real href, so people using the keyboard for navigation or screen 
readers will still be able to use this app.

import React from "react";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link
} from "react-router-dom";

export default function App() {
  return (
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to="/">Home</Link>
            </li>
            <li>
              <Link to="/about">About</Link>
            </li>
            <li>
              <Link to="/users">Users</Link>
            </li>
          </ul>
        </nav>

        {/* A <Switch> looks through its children <Route>s and
            renders the first one that matches the current URL. */}
        <Switch>
          <Route path="/about">
            <About />
          </Route>
          <Route path="/users">
            <Users />
          </Route>
          <Route path="/">
            <Home />
          </Route>
        </Switch>
      </div>
    </Router>
  );
}

function Home() {
  return <h2>Home</h2>;
}

function About() {
  return <h2>About</h2>;
}

function Users() {
  return <h2>Users</h2>;
}


6 September 2021

NodeJs (server side)
--------------------
Node is a runtime environment which allows you to run javascript outside of the browser

creating a simple CLI

1) create the root folder
2) run npm init and accept or edit the requests
3) create a src folder
4) create app.js in the src folder
5) create utils folder
6) create index.js in the utils folder
7) cd back to root folder and run npm -y init
8) tree should look as follows:
.
├── package.json
└── src
    ├── app.js
    └── utils
        └── index.js

2 directories, 3 files

------------------------------------------------

The app.js file contains the progress.argv variables
The index.js file contains the function

MODULARITY
---------
Exporting the contents of a file
----------------------------------

In node we can't use export defaut like we do in React
Instead there are 2 ways we can do it

1) [module.exports = [function name] at the bottom of the file
This is ok if we are only exporting the one function

2) Another way is using the following syntax:

exports.myFunction = (para1, para2) => {
  //block of code here
}

Importing a files contents
--------------------------

Importing a file is a little different to React
The syntax to import the function myFunction which is written in the index.js file in the utils folder would be as follows:
const { myFunction } = require('./utils')
Here we would be in the src folder and our tree would look as follows:
.
├── app.js
└── utils
    └── index.js
Note by calling the file in the utils folder index.js we don't have to include it in the path

We use modularity to separate our concers, this makes debubbing easier as the code is not one huge file

---------------------------------------------------------------------------------------------------
Databases
---------
There are 2 main types of database
Document based database - Mongo
Relational databases - sql azure

With a local install of a database the database exists on the local machine
and in not accessible unless it is shared.
Can use Docker as a way of doing this.

Mongo Atlas is a hosting provider


SETTING UP A MONGO DATABASE CONNECTION
---------------------------------------
---------------------------------------
Setting up the basic file structure, from the root directory of the project looks like this:

.
├── LICENSE
├── README.md
└── src
    ├── app.js
    ├── db
    │   └── connection.js
    └── utils
        └── index.js


Next add a .gitignore and .env file in the root of the folder project, 
and add .env and /node_modules to the .gitignore file.

With all that done run: <npm init -y> and <npm i dotenv>
NOTE: The dotenv package allows access to the .env file in the root directory of the project

To interact with MongoDB you need to install MongoDB's library with the following command:
npm i mongodb
NOTE: if an npm package ask to be installed globally DO NOT DO IT!!!

Writing the code
----------------
The connection.js file connects to the database and in our example was where all our interactions with
the database  were held. MongoDB is not the best and all connections have to be inside a function
we declare in the connection.js file.

So starting with the connection.js file add the following:

const {MongoClient} = require("mongodb");
require("dotenv").config(); //this allows you to access a .env file in your project

//declare a Mongo client (declaring this app can connect to my Mongo database)
const client = new MongoClient() 

NOTE:THE MongoClient FUNCTION TAKES TWO ARGUMENTS, THE URI AND OPTIONS
DO NOT PASTE THE URI HERE BECAUSE IT WILL BE VISIBLE TO ANYONE.

Next paste the connection URI into the .env file giving it the variable name URI_MONGO
Then add [process.env.MONGO_URI] as the argument in MongoClient inside the connection.js file

Now create an asycronous function in the connection.js file using <async>
THIS IS BECAUSE THE TIMELINE IS NOW OUTSIDE OF THE APPLICATION AND THE CODE NEEDS TO WAIT
UNTIL THE TIMELINE RETURNS TO THE APPLICATION WHEN THE REQUEST HAS COMPLETED

Code will look like this:

const {MongoClient} = require("mongodb");
require("dotenv").config(); //this allows you to access a .env file in your project

//declare a Mongo client (declaring this app can connect to my Mongo database)
const client = new MongoClient(process.env.MONGO_URI)

const connection = async (crudFunc, dataObj) => {
  await client.connect();
  const db = client.db("bands");
  const collection = db.collection("band");
  collection.insertOne({name: "Eagles"})
//  await crudFunc(collection, dataObj
//  client.close();
}

//module.exports = connection;
connection();






