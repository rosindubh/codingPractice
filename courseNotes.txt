# phil welsby - CodeNation Master27 Course Notes

Monday 23 August 2021
Morning session
---------------------

Testing using jest:
To set up the environment:
1) create a folder with no spaces.
2) create 2 files called [app.js] and [app.test.js]
3) run: <npm init -y>
4) run: <npm install --save-dev jest>
5) edit line 7 of the package.json file to read ["test": "jest"]

First we create the [app.test.js] file adding [let app = require("./app");]
so we can acquire the app.js files contents.

a test may look something like this:
test('should equal 5 when passed 2 and 3', () => {
  expect(app.add(2, 3)).toBe(5)
});


To run the test we enter: [npm test]
The test will at this stage fail. Next create a function or whatever that we are 
testing for in the app.js file, and export the contents as follows:
module.exports = {
  <enter the name of the apps here with a comma after each like this>
  add,
  myFunction,
  philsFunctions,
  noOfFunctions: 3
}

If these 3 functions existed in the [app.js] file they would be accessible to the [app.test.js] file.

We only covered Test Driven Development (TDD) today. Other type of testing are:
Integration Testing
Functional Testing

Tuesday 24 August 2021
Morning
React.js

NOTE: props and components are very important

Three major players:    React.js    Vue     Angular

JSX-HTML converts to standard JavaScript

A component can be either a function or a class.

Functional Components
App is the root component

There is a virtual DOM and an actual DOM. React updates the actual DOM if the virtual DOM changes.

Standard practice is to name function components starting with a capital letter.

There can only be one parent element, most commonly a <div> tag

React.createElement(      this is JavaScript
Component<                this is JSX

The name of the compiler is Babel

To start a new project enter the following into the terminal. Making sure you are in the right directory.

npx create-react-app [name of the app goes here]

Afternoon session
-----------------

You cannot use the word class in React, class is a keyword inside React. Use className instead.

State & Methods
----------------

useState hook (research this)

NOTE: hooks do not work inside classes

You can only pass props down the tree not up it.

Check out Netninja for React and read the React Documentation

Example of using useState:
const [count, setCount] = useState(0)

The useState function returns a pair of values which we restructure with []
The first is a value, the second is a function to update the first

Think of the state as a kind of storee, which holds the current state
of the application.

When the app loads, it will be rendered with the initial state (that you coded in)
but as uses interact with your app, there state can change

As well as having a state property inside our component, we can also have different
methods (functions) which can do different things to our user interface

-------------------------------------------------------------------------------------------------
Tuesday 31 August

my GitHub link to this subject is here: https://github.com/rosindubh/fetch-app

API's and fetching DATA

Installed Insomnia link https://insomnia.rest/

An API is a software interface between computers and programs or programs with other programs.
The <fetch> module is used to get data

React life-cycle link: https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

componentDidMount Method
------------------------
This is no loger as popular due to the arrival of hooks and the use of functionale components
This method called handelFetch


componentDidUpdate Method
------------------------
This was used as confirmation that the component mounted and feed to console 

componentWillUnmount Method
---------------------------
This is like a clean-up say ifyou were to click off the page

Throw and Try to Catch
----------------------
This is error handling. 
The try statement lets you test a block of code for errors.
The catch statement lets you handle the error.
The throw statement lets you create custom errors.
The finally statement lets you execute code, after try and catch, regardless of the result.

JavaScript try and catch

The try statement allows you to define a block of code to be tested for errors while it is being executed.

The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

The JavaScript statements try and catch come in pairs:

try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
} 


The throw Statement

The throw statement allows you to create a custom error.

Technically you can throw an exception (throw an error).

The exception can be a JavaScript String, a Number, a Boolean or an Object:


The finally Statement
---------------------
The finally statement lets you execute code, after try and catch, regardless of the result:
